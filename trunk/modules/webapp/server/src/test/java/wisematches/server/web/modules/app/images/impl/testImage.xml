package wisematches.server.web.modules.app.images.impl;

        import org.junit.After;
        import static org.junit.Assert.*;
        import org.junit.Before;
        import org.junit.Test;
        import wisematches.server.web.modules.app.images.PlayerImageType;

        import javax.imageio.ImageIO;
        import java.awt.image.BufferedImage;
        import java.io.File;
        import java.io.FileInputStream;
        import java.io.IOException;
        import java.io.InputStream;

        /**
        * @author
<a href="mailto:smklimenko@gmail.com">Sergey Klimenko</a>
        */
        public class FilePlayerImagesManagerTest {
        private File testFolder = new File("tests/");
        private File imagesFolder = new File(testFolder, "images/player/mock");

        private File bmpImage;
        private File gifImage;
        private File jpgImage;
        private File pngImage;

        @Before
        public void init() {
        gifImage = new File(getClass().getResource("testImage.gif").getFile());
        jpgImage = new File(getClass().getResource("testImage.jpg").getFile());
        pngImage = new File(getClass().getResource("testImage.png").getFile());
        bmpImage = new File(getClass().getResource("testImage.bmp").getFile());
        }

        @Test
        public void test_pngImage() throws IOException {
        doImageTest(pngImage);
        }

        @Test
        public void test_gifImage() throws IOException {
        doImageTest(pngImage);
        }

        @Test
        public void test_jpgImage() throws IOException {
        doImageTest(pngImage);
        }

        @Test
        public void test_bmpImage() throws IOException {
        doImageTest(pngImage);
        }

        @Test
        public void test_unknownImage() throws IOException {
        doImageTest(pngImage);
        }

        private void doImageTest(final File image) throws IOException {
        FilePlayerImagesManager manager = new FilePlayerImagesManager();
        manager.setImagesFolder(imagesFolder);

        assertNull(manager.getPlayerImage(1L, PlayerImageType.REAL));

        manager.setPlayerImage(1L, new FileInputStream(image), PlayerImageType.REAL);
        assertNotNull(manager.getPlayerImage(1L, PlayerImageType.REAL));
        assertNull(manager.getPlayerImage(1L, PlayerImageType.AVATAR));

        manager.setPlayerImage(1L, new FileInputStream(image), PlayerImageType.AVATAR);
        assertNotNull(manager.getPlayerImage(1L, PlayerImageType.REAL));

        final InputStream img = manager.getPlayerImage(1L, PlayerImageType.AVATAR);
        assertNotNull(img);

        final BufferedImage bufferedImage = ImageIO.read(img);
        assertEquals(PlayerImageType.AVATAR.getWidth(), bufferedImage.getWidth());
        assertEquals(PlayerImageType.AVATAR.getHeight(), bufferedImage.getHeight());
        }

        @After
        public void thearDown() {
        final File[] files = imagesFolder.listFiles();
        for (File file : files) {
        file.delete();
        }
        testFolder.delete();
        }
        }
